{"version":3,"sources":["lib/gen-passphrase.util.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rollDices","dices","Array","from","length","min","max","randomBuffer","Uint32Array","window","crypto","getRandomValues","randomNumber","Math","floor","getRandomIntInclusive","join","genPassphrase","words","wordList","App","React","useState","setLength","generatedPassphrase","setGeneratedPassphrase","useEffect","className","onClick","navigator","clipboard","writeText","type","value","onChange","e","Number","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"o6xIAaA,SAASA,EAAUC,GACjB,OAAOC,MAAMC,KAAK,CAAEC,OAAQH,IAAS,kBAVvC,SAA+BI,EAAaC,GAC1C,IAAMC,EAAe,IAAIC,YAAY,GAErCC,OAAOC,OAAOC,gBAAgBJ,GAE9B,IAAMK,EAAeL,EAAa,GAAb,WACrB,OAAOM,KAAKC,MAAMF,GAAgBN,EAAMD,EAAM,IAAMA,EAAM,GAIfU,CAAsB,EAAG,MAAIC,KACtE,IAIG,SAASC,EAAcC,GAC5B,OAAOhB,MAAMC,KACX,CAAEC,OAAQc,IACV,kBAAOC,EAAiBnB,EApBL,OAqBnBgB,KAAK,K,iBCkCMI,MAjDf,WAAgB,IAAD,EACeC,IAAMC,SAHb,GAER,mBACNlB,EADM,KACEmB,EADF,OAEyCF,IAAMC,SAC1DL,EAAcb,IAHH,mBAENoB,EAFM,KAEeC,EAFf,KAUb,OAJAJ,IAAMK,WAAU,WACdD,EAAuBR,EAAcb,MACpC,CAACA,IAGF,qBAAKuB,UAAU,MAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,gCACE,2DACA,4BACE,+BAAOH,MAET,gCACE,wBACEI,QAAS,WACPC,UAAUC,UAAUC,UAAUP,IAFlC,kBAOA,wBACEG,UAAU,qBACVC,QAAS,WACPH,EAAuBR,EAAcb,KAHzC,4BASF,sDACA,uBACE4B,KAAK,SACLC,MAAO7B,EACP8B,SAAU,SAACC,GACTZ,EAAUa,OAAOD,EAAEE,OAAOJ,mBClCzBK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1d94703.chunk.js","sourcesContent":["import wordList from \"lib/word-list.json\";\n\nconst NUMBER_OF_DICE = 5;\n\nfunction getRandomIntInclusive(min: number, max: number) {\n  const randomBuffer = new Uint32Array(1);\n\n  window.crypto.getRandomValues(randomBuffer);\n\n  const randomNumber = randomBuffer[0] / (0xffffffff + 1);\n  return Math.floor(randomNumber * (max - min + 1)) + min + \"\";\n}\n\nfunction rollDices(dices: number) {\n  return Array.from({ length: dices }, () => getRandomIntInclusive(1, 6)).join(\n    \"\"\n  );\n}\n\nexport function genPassphrase(words: number) {\n  return Array.from(\n    { length: words },\n    () => (wordList as any)[rollDices(NUMBER_OF_DICE)]\n  ).join(\" \");\n}\n","import React from \"react\";\n\nimport { genPassphrase } from \"lib/gen-passphrase.util\";\n\nimport \"./App.css\";\n\nconst DEFAULT_LENGTH = 6;\n\nfunction App() {\n  const [length, setLength] = React.useState(DEFAULT_LENGTH);\n  const [generatedPassphrase, setGeneratedPassphrase] = React.useState(\n    genPassphrase(length)\n  );\n\n  React.useEffect(() => {\n    setGeneratedPassphrase(genPassphrase(length));\n  }, [length]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__container\">\n        <div>\n          <p>Your generated passphrase:</p>\n          <p>\n            <code>{generatedPassphrase}</code>\n          </p>\n          <div>\n            <button\n              onClick={() => {\n                navigator.clipboard.writeText(generatedPassphrase);\n              }}\n            >\n              Copy\n            </button>\n            <button\n              className=\"app__button--right\"\n              onClick={() => {\n                setGeneratedPassphrase(genPassphrase(length));\n              }}\n            >\n              Re-generate\n            </button>\n          </div>\n          <label>Number of words: </label>\n          <input\n            type=\"number\"\n            value={length}\n            onChange={(e) => {\n              setLength(Number(e.target.value));\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}